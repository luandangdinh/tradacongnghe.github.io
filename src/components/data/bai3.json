{
  "id":3,
  "name": "ReactJS: Introducing JSX",
  "desc": "Introducing JSX là gì, tại sao lại là JSX. Ở bài này chúng ta cùng nhau tìm hiểu nhé. Let's go",
  "image": "https://image.slidesharecdn.com/reactjs-intro-180810114620/95/introduction-to-react-js-1-638.jpg?cb=1536745234",
  "content": [
      "<p>Hãy cùng nhau xem xét cách khai báo biến sau:</p>",
      "<pre>const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;</pre>",
      "<p>Cú pháp này không phải là một chuỗi hay một HTML. Nó được gọi là JSX và nó là một phần từ mở rộng cú pháp cho JavaScript. Chúng tôi khuyên bạn nên sử dụng nó với React để mô tả giao diện người dùng. JSX có thể nhắc bạn về một template language, nhưng nó đi kèm với toàn bộ sức mạnh của JavaScript.</p>",
      "<p>JSX tạo ra các \"elements\" React. Chúng ta sẽ khám phá việc kết xuất chúng với DOM trong bài tiếp theo. Ở đây, bạn có thể tìm thấy những điều cơ bản về JSX cần thiết để bắt đầu.</p>",
      "<h2>Tại sao lại là JSX?</h2>",
      "<p>React chấp nhận một thực tế rằng logic hiển thị vốn được kết hợp với logic giao diện người dùng khác: Cách các sự kiện được xử lý, trạng thái thay đổi như thế nào theo thời gian và cách các dữ liệu được chuẩn bị để hiển thị.</p>",
      "<p>Thay vì phân tách các công nghệ một cách giả tạo bằng việc đặt đánh dấu và logic vào các tệp riêng biệt, React phân tách các mối quan tâm bằng các đơn vị được kết hợp lỏng lẻo gọi là \"components\". Chúng ta sẽ nói về \"components\" trong phần tiếp theo.</p>",
      "<p>React không bắt buộc sử dụng JSX, nhưng phần lớn mọi người đều thấy nó hữu ích như một công cụ hỗ trợ trực quan khi làm việc với giao diện người dùng bên trong code JavaScript. Nó cũng cho phép React hiển thị các thông báo lỗi và cảnh báo hữu ích hơn.</p>",
      "<h2>Nhúng biểu thức trong JSX</h2>",
      "<p>Trong ví dụ sau, chúng ta khai báo một biến <code>name</code> và sử dụng nó trong JSX bằng cách đặt nó trong dấu ngoặc xoắn {}.</p>",
      "<pre>",
      "const name = 'Josh Perez';",
      "const element = &lt;h1&gt;Hello, {name}&lt;/h1&gt;;",
      "ReactDOM.render(",
      "&emsp;element,",
      "&emsp;document.getElementById('root')",
      ");",
      "</pre>",
      "<p>Bạn có thể đặt bất kỳ các biểu thức hợp lệ bên trong dấu {}. Trong ví dụ tiếp theo chúng ta sẽ thử nhúng giá trị của việc gọi một Function xem thế nào nhé.</p>",
      "<pre>",
      "function formatName(user) {",
      "&emsp;return user.firstName + ' ' + user.lastName;",
      "}",
      "const user = {",
      "&emsp;firstName: 'Harper',",
      "&emsp;lastName: 'Perez'",
      "};",
      "const element = (",
      "&emsp;&lt;h1&gt;Hello, {formatName(user)}!&lt;/h1&gt;",
      ");",
      "ReactDOM.render(",
      "&emsp;element,",
      "&emsp;document.getElementById('root')",
      ");",
      "</pre>",
      "<p>Thật tuyệt, kết quả ra đúng <a href=\"https://codepen.io/pen?&editable=true&editors=0010\" target=\"_blank\">Codepen</a>. Mặc dù không bắt buộc nhưng khi thực hiện việc này chúng ta vẫn nên đặt nó trong dấu ngoặc đơn để tránh việc tự động chèn dấu chấm phẩy</p>",
      "<h2>JSX cũng là biểu thức</h2>",
      "<p>Sau khi biên dịch, các biểu thức JSX sẽ trở thành các lệnh gọi hàm JavaScript thông thường. Điều này có nghĩa là bạn có thể sử dụng JSX bên trong các câu lệnh if và vòng lặp for, gán nó cho các biến, chấp nhận nó dưới dạng đối số và trả về nó từ các hàm.</p>",
      "<pre>",
      "function getGreeting(user) {",
      "&emsp;if (user) {",
      "&emsp;&emsp;return &lt;h1&gt;Hello, {formatName(user)}!&lt;/h1&gt;;",
      "}",
      "&emsp;return &lt;h1>Hello, Stranger.&lt;/h1&gt;;",
      "}",
      "</pre>",
      "<h2>Các thuộc tính với JSX</h2>",
      "<p>Bạn có thể sử dụng dấu nháy kép để chỉ định ký tự chuỗi làm thuộc tính</p>",
      "<pre>const element = &lt;div tabIndex=\"0\"&gt;&lt;/div&gt;;</pre>",
      "<p>Bạn cũng có thể sử dụng dấu {} để nhứng biểu thức JavaScript vào một thuộc tính như sau:</p>",
      "<pre>const element = &lt;img src={user.avatarUrl}/&gt;;</pre>",
      "<p>Bạn không thể sử dụng dấu nháy kép bao quanh dấu {} khi nhúng biểu thức vào thuộc tính. Bạn nên sử dụng dấu nháy kép cho giá trị là chuỗi và dấu {} cho biểu thức</p>",
      "<div class=\"danger\">",
      "<p><strong>Warning:</strong> Vì JSX gần với JavaScript hơn HTML, nên ReactDOM sử dụng quy ước đặt tên thuộc tính là camelCase thay vì tên thuộc tính trong HTML. Ví dụ như class trong HTML thì JSX dùng là className.</p>",
      "</div>",
      "<h2>JSX ngăn chặn tấn công Injection</h2>",
      "<p>Thật an toàn khi nhúng đầu vào của người dùng vào JSX:</p>",
      "<pre>",
      "const title = response.potentiallyMaliciousInput;",
      "// This is safe:",
      "const element = &lt;h1&gt;{title}&lt;/h1&gt;;",
      "</pre>",
      "<p>Theo mặc định, React DOM sẽ escapes giá trị nào được nhúng trong JSX trước khi hiển thị chúng.Do đó, nó đảm bảo rằng bạn không báo giờ có thể đưa vào bất kỳ thứ gì không được viết rõ ràng vào ứng dụng của mình. Mọi thứ được chuyển đổi thành chuỗi trước khi được hiển thị. Điều này giúp ngăn chặn các cuộc tấn công XSS.</p>",
      "<h2>JSX đại diện cho các đối tượng</h2>",
      "<p>Babel biên dịch JSX thành các cuộc gọi React.createElement(). Hai ví dụ sau giống hệt nhau.</p>",
      "<pre>",
      "const element = (",
      "&emsp;&lt;h1 className=\"greeting\"&gt;",
      "&emsp;&emsp;Hello, world!",
      "&emsp;&lt;/h1&gt;",
      ");",
      "</pre>",
      "<pre>",
      "const element = React.createElement(",
      "&emsp;'h1',",
      "&emsp;{className: 'greeting'},",
      "&emsp;'Hello, world!'",
      ");",
      "</pre>",
      "<p><code>React.createElement()</code> thực hiện một số kiểm tra giúp bạn viết mã không có lỗi nhưng về cơ bản nó tạo ra đối tượng như sau:</p>",
      "<pre>",
      "// Note: this structure is simplified",
      "const element = {",
      "&emsp;type: 'h1',",
      "&emsp;props: {",
      "&emsp;&emsp;className: 'greeting',",
      "&emsp;&emsp;children: 'Hello, world!'",
      "&emsp;}",
      "};",
      "</pre>",
      "<p>Những đối tượng này được gọi là \"React elements\". Bạn có thể coi chúng là mô tả về những gì bạn muốn xem trên màn hình. React đọc các đối tượng này và sử dụng chúng để xây dựng DOM và cập nhật nó. Chúng ta sẽ khám phá việc render phần tử React vào DOM trong phần tiếp theo.</p>",
      "<div class=\"danger\">",
      "<p><strong>Tip:</strong> Chúng ta được khuyên là nên sử dụng định nghĩa ngôn ngữ Babel cho trình soạn thảo mà bạn chọn để cả mã ES6 và JSX đều được hiển thị tốt nhất.</p>",
      "</div>",
      "<p>Bài tiếp theo chúng ta cùng tìm hiểu <a href=\"#/post/4\">Rendering Elements</a></p>"
    ]
}
